@page "/"
@using Syncfusion.Blazor.Diagram
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.Diagram.SymbolPalette
@using Syncfusion.Blazor.Navigations
@using DiagramShapes = Syncfusion.Blazor.Diagram.NodeShapes
@using DiagramSegments = Syncfusion.Blazor.Diagram.ConnectorSegment
@using Orientation= Syncfusion.Blazor.Diagram.Orientation
<div style="width: 100%">
    <div style="width:240px;height:100%;float:left;">
        <SfSymbolPaletteComponent @ref="@PaletteInstance" Height="700px" Palettes="@palettes" SymbolHeight="60" SymbolWidth="60" SymbolMargin="@SymbolMargin">
        </SfSymbolPaletteComponent>
    </div>
    <div style="width:calc(100% - 242px);height:100%;float:left;">
        <SfDiagramComponent @ref="@Diagram" Connectors="@connectors" Created="OnCreated" SelectionChanged="@OnSelectionChanged" Height="687px"
                            GetCustomTool="@GetCustomTool" Nodes="@nodes"
                            SelectionSettings="@selectionSettings" NodeCreating="OnNodeCreating" ConnectorCreating="OnConnectorCreating">
            <SnapSettings>
                <HorizontalGridLines LineColor="#e0e0e0 " LineIntervals="@GridLineIntervals">
                </HorizontalGridLines>
                <VerticalGridLines LineColor="#e0e0e0" LineIntervals="@GridLineIntervals">
                </VerticalGridLines>
            </SnapSettings>
            <ContextMenuSettings Show="true"></ContextMenuSettings>
        </SfDiagramComponent>
    </div>
</div>
<div>

    <span>DiagraSelection position X:</span>
    <input type="number" placeholder="X" onchange="@SelectionPositionXChange" />
    <span>DiagraSelection position Y:</span>
    <input type="number" placeholder="Y" onchange="@SelectionPositionYChange" />
</div>
<br />
<style>

    .ulstyle {
        margin: 0px;
        padding-left: 20px;
        display: inline-block;
    }

    .list {
        float: left;
        line-height: 20px;
        margin: 10px;
        min-width: 340px;
    }
</style>
@functions
{
    private int connectorCount = 0;
    DiagramSelectionSettings selectionSettings = new DiagramSelectionSettings();
    public DiagramSize? SymbolPreview;
    public SymbolMargin? SymbolMargin = new SymbolMargin { Left = 15, Right = 15, Top = 15, Bottom = 15 };
    public SfDiagramComponent? Diagram;
    public SfSymbolPaletteComponent? PaletteInstance;
    DiagramObjectCollection<UserHandle> handles = new DiagramObjectCollection<UserHandle>();
    //Defines Diagram's nodes collection
    private DiagramObjectCollection<Node>? nodes = new DiagramObjectCollection<Node>();
    //Defines Diagram's connectors collection
    private DiagramObjectCollection<Connector>? connectors = new DiagramObjectCollection<Connector>();
    //Define palettes collection
    private DiagramObjectCollection<Palette>? palettes = new DiagramObjectCollection<Palette>();
    // Defines palette's flow-shape collection
    private DiagramObjectCollection<NodeBase>? flowShapeSymbols = new DiagramObjectCollection<NodeBase>();
    // Defines interval values for GridLines
    public double[]? GridLineIntervals { get; set; }
    // Defines palette's connector collection
    private DiagramObjectCollection<NodeBase>? connectorSymbols = new DiagramObjectCollection<NodeBase>();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            UpdateHandle();
        }
        PaletteInstance!.Targets = new DiagramObjectCollection<SfDiagramComponent>
        {
            Diagram!
        };
    }
    private void OnSelectionChanged(Syncfusion.Blazor.Diagram.SelectionChangedEventArgs args)
    {
        if (args.NewValue.Count > 0 && args.NewValue[0] is Node)
        {
            Diagram!.SelectionSettings.Constraints = Diagram.SelectionSettings.Constraints | SelectorConstraints.UserHandle;
        }
        else if (args.NewValue.Count > 0)
        {
            Diagram!.SelectionSettings.Constraints = Diagram.SelectionSettings.Constraints & ~SelectorConstraints.UserHandle;
        }
    }
    private void OnCreated()
    {
        Diagram!.Select(new ObservableCollection<IDiagramObject>() { Diagram.Nodes[0] });
    }
    // Method to customize the tool
    public InteractionControllerBase GetCustomTool(DiagramElementAction action, string id)
    {
        InteractionControllerBase? tool = null;
        if (id == "Draw")
        {
            tool = new DrawTool(Diagram!);
        }
        else
        {
            tool = new AddDeleteTool(Diagram!);
        }
        return tool;
    }
    // Custom tool to delete the node.
    public class AddDeleteTool : DragController
    {
        SfDiagramComponent sfDiagram;
        Node? deleteObject = null;
        public AddDeleteTool(SfDiagramComponent Diagram) : base(Diagram)
        {
            sfDiagram = Diagram;
        }
        public override void OnMouseDown(DiagramMouseEventArgs args)
        {
            if (sfDiagram.SelectionSettings.Nodes.Count > 0 && ((sfDiagram.SelectionSettings.Nodes[0]) is Node))
            {
                deleteObject = (sfDiagram.SelectionSettings.Nodes[0]) as Node;
            }
            base.OnMouseDown(args);
        }
        public override void OnMouseUp(DiagramMouseEventArgs args)
        {
            if (deleteObject != null)
            {
                sfDiagram.BeginUpdate();
                sfDiagram.Nodes.Remove(deleteObject);
                _ = sfDiagram.EndUpdateAsync();
            }
            base.OnMouseUp(args);
            this.InAction = true;
        }
    }
    public class DrawTool : ConnectorDrawingController
    {
        SfDiagramComponent sfDiagram;
        Connector? newConnector = null;
        public DrawTool(SfDiagramComponent Diagram) : base(Diagram, DiagramElementAction.ConnectorSourceEnd)
        {
            sfDiagram = Diagram;
            newConnector = new Connector()
                {
                    ID = "OrthogonalConnector",
                    SourceID = sfDiagram.SelectionSettings.Nodes[0].ID,
                    Type = ConnectorSegmentType.Orthogonal,
                };
#pragma warning disable BL0005
            Diagram.InteractionController = DiagramInteractions.DrawOnce;
            Diagram.DrawingObject = newConnector;
#pragma warning restore BL0005
        }
        public override void OnMouseDown(DiagramMouseEventArgs args)
        {
            base.OnMouseDown(args);
        }
        public override void OnMouseUp(DiagramMouseEventArgs args)
        {
            base.OnMouseUp(args);
        }
    }
    protected override void OnInitialized()
    {
        GridLineIntervals = new double[] {
            1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75
    };
        InitDiagramModel();
        InitPaletteModel();
    }
    // Create Nodes and Connectors for the diagram.
    private void InitDiagramModel()
    {
        CreateNode("node1", 300, 80, NodeFlowShapes.Terminator, "Place order");
        CreateNode("node2", 300, 160, NodeFlowShapes.Process, "Start transaction");
        CreateNode("node3", 300, 240, NodeFlowShapes.Process, "Verification");
        CreateNode("node4", 300, 330, NodeFlowShapes.Decision, "Credit card valid?");
        CreateNode("node5", 300, 430, NodeFlowShapes.Decision, "Funds available?");
        CreateNode("node6", 530, 330, NodeFlowShapes.Process, "Enter payment method");
        CreateNode("node7", 300, 530, NodeFlowShapes.Process, "Complete transaction");
        CreateNode("node8", 110, 530, NodeFlowShapes.Data, "Send e-mail");
        CreateNode("node9", 475, 530, NodeFlowShapes.DirectData, "Customer \n database");
        CreateNode("node10", 300, 630, NodeFlowShapes.Terminator, "Log transaction");
        CreateNode("node11", 480, 630, NodeFlowShapes.Process, "Reconcile the entries");
        CreateConnector("node1", "node2");
        CreateConnector("node2", "node3");
        CreateConnector("node3", "node4");
        CreateConnector("node4", "node5", "Yes");
        CreateConnector("node4", "node6", "No", false, "port3", "port1");
        CreateConnector("node5", "node6", "No", false, "port3", "port4");
        CreateConnector("node5", "node7", "Yes");
        CreateConnector("node6", "node2", default(string), false, "port2", "port3");
        CreateConnector("node7", "node8");
        CreateConnector("node7", "node9");
        CreateConnector("node7", "node10");
        CreateConnector("node10", "node11", default(string), true);
    }
    // Create Nodes and Connectors for the Palette.
    private void InitPaletteModel()
    {
        palettes = new DiagramObjectCollection<Palette>();
        SymbolPreview = new DiagramSize
            {
                Width = 100,
                Height = 100
            };
        flowShapeSymbols = new DiagramObjectCollection<NodeBase>();
        CreatePaletteNode(NodeFlowShapes.Terminator, "Terminator");
        CreatePaletteNode(NodeFlowShapes.Process, "Process");
        CreatePaletteNode(NodeFlowShapes.Decision, "Decision");
        CreatePaletteNode(NodeFlowShapes.Document, "Document");
        CreatePaletteNode(NodeFlowShapes.PreDefinedProcess, "PreDefined Process");
        CreatePaletteNode(NodeFlowShapes.PaperTap, "Punched Tape");
        CreatePaletteNode(NodeFlowShapes.DirectData, "Direct Data");
        CreatePaletteNode(NodeFlowShapes.SequentialData, "Sequential Data");
        CreatePaletteNode(NodeFlowShapes.Sort, "Sort");
        CreatePaletteNode(NodeFlowShapes.MultiDocument, "MultiDocument");
        CreatePaletteNode(NodeFlowShapes.Collate, "Collate");
        CreatePaletteNode(NodeFlowShapes.SummingJunction, "Summing Junction");
        CreatePaletteNode(NodeFlowShapes.Or, "OR");
        CreatePaletteNode(NodeFlowShapes.InternalStorage, "Internal Storage");
        CreatePaletteNode(NodeFlowShapes.Extract, "Extract");
        CreatePaletteNode(NodeFlowShapes.SequentialAccessStorage, "Sequential Access Storage");
        CreatePaletteNode(NodeFlowShapes.Annotation, "Annotation");
        CreatePaletteNode(NodeFlowShapes.Data, "Data");
        CreatePaletteNode(NodeFlowShapes.Card, "Card");
        CreatePaletteNode(NodeFlowShapes.Delay, "Delay");
        connectorSymbols = new DiagramObjectCollection<NodeBase>();
        CreatePaletteConnector("OrthogonalWithArrow", ConnectorSegmentType.Orthogonal, DecoratorShape.Arrow);
        CreatePaletteConnector("Orthogonal", ConnectorSegmentType.Orthogonal, DecoratorShape.None);
        CreatePaletteConnector("StraightWithArrow", ConnectorSegmentType.Straight, DecoratorShape.Arrow);
        CreatePaletteConnector("Straight", ConnectorSegmentType.Straight, DecoratorShape.None);
        CreatePaletteConnector("Bezier", ConnectorSegmentType.Bezier, DecoratorShape.None);
        palettes = new DiagramObjectCollection<Palette>()
        {
            #pragma warning disable BL0005
            new Palette() {Symbols = flowShapeSymbols, Title = "Flow Shapes", ID = "Flow Shapes", IconCss = "e-ddb-icons e-flow"},
            new Palette() {Symbols = connectorSymbols, Title = "Connectors", IsExpanded = true, IconCss = "e-ddb-icons e-connector"},
            #pragma warning restore BL0005
        };
    }
    private void OnNodeCreating(IDiagramObject obj)
    {
        Node? node = obj as Node;
        node!.Style.Fill = "#357BD2";
        if (!(node.ID.StartsWith("Annotation") || node.ID.StartsWith("Sequential Data")))
            node.Style.StrokeColor = "White";
        node.Style.Opacity = 1;
    }
    private void OnConnectorCreating(IDiagramObject obj)
    {
        Connector? node = obj as Connector;
        node!.Style.Fill = "black";
        node.Style.StrokeColor = "black";
        node.Style.Opacity = 1;
        node.TargetDecorator.Style.Fill = "black";
        node.TargetDecorator.Style.StrokeColor = "black";
    }
    private void SelectionPositionXChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out double newX))
        {
            if ((Diagram.SelectionSettings.Nodes.Count + Diagram.SelectionSettings.Connectors.Count) > 0)
            {
                double currentX = Diagram.SelectionSettings.OffsetX;
                double offsetX = newX - currentX; // Calculate the required offset
                Diagram.Drag(Diagram.SelectionSettings, offsetX, 0);
            }
        }
    }

    private void SelectionPositionYChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out double newY))
        {
            if ((Diagram.SelectionSettings.Nodes.Count + Diagram.SelectionSettings.Connectors.Count) > 0)
            {
                double currentY = Diagram.SelectionSettings.OffsetY;
                double offsetY = newY - currentY; // Calculate the required offset
                Diagram.Drag(Diagram.SelectionSettings, 0, offsetY);
            }
        }
    }
    // Method is used to create a node for the palette.
    private void CreatePaletteNode(NodeFlowShapes flowShape, string id)
    {
        Node diagramNode = new Node()
            {
                ID = id,
                Shape = new FlowShape() { Type = Syncfusion.Blazor.Diagram.NodeShapes.Flow, Shape = flowShape },
                Style = new ShapeStyle() { StrokeColor = "#757575", StrokeWidth = 1 },
            };
        if (id == "Terminator" || id == "Process")
        {
            diagramNode.Width = 80;
            diagramNode.Height = 40;
        }
        else if (id == "Decision" || id == "Document" || id == "PreDefined Process" ||
          id == "Punched Tape" || id == "Direct Data" || id == "MultiDocument" || id == "Data")
        {
            diagramNode.Width = 50;
            diagramNode.Height = 40;
        }
        else
        {
            diagramNode.Width = 50;
            diagramNode.Height = 50;
        }
        double oldWidth = Convert.ToDouble(diagramNode.Width);
        double oldHeight = Convert.ToDouble(diagramNode.Height);
        double ratio = 100 / oldWidth;
        diagramNode.Width = 100;
        diagramNode.Height *= ratio;
        flowShapeSymbols!.Add(diagramNode);
    }
    // used to create a Port.
    private DiagramObjectCollection<PointPort> CreatePort()
    {
        DiagramObjectCollection<PointPort> defaultsPorts = new DiagramObjectCollection<PointPort>();
        PointPort port1 = new PointPort()
            {
                ID = "port1",
                Shape = PortShapes.Circle,
                Offset = new DiagramPoint() { X = 0, Y = 0.5 }
            };
        PointPort port2 = new PointPort()
            {
                ID = "port2",
                Shape = PortShapes.Circle,
                Offset = new DiagramPoint() { X = 0.5, Y = 0 }
            };
        PointPort port3 = new PointPort()
            {
                ID = "port3",
                Shape = PortShapes.Circle,
                Offset = new DiagramPoint() { X = 1, Y = 0.5 }
            };
        PointPort port4 = new PointPort()
            {
                ID = "port4",
                Shape = PortShapes.Circle,
                Offset = new DiagramPoint() { X = 0.5, Y = 1 }
            };
        defaultsPorts.Add(port1);
        defaultsPorts.Add(port2);
        defaultsPorts.Add(port3);
        defaultsPorts.Add(port4);
        return defaultsPorts;
    }
    // Method is used to create a Connector for the diagram.
    private void CreateConnector(string sourceId, string targetId, string? label = default(string), bool isDashLine = false, string sport = "", string tport = "")
    {
        Connector diagramConnector = new Connector()
            {
                ID = string.Format("connector{0}", ++connectorCount),
                SourceID = sourceId,
                TargetID = targetId,
                SourcePortID = sport,
                TargetPortID = tport
            };
        if (isDashLine)
        {
            diagramConnector.Style = new ShapeStyle() { StrokeDashArray = "2,2" };
        }
        if (label != default(string))
        {
            var annotation = new PathAnnotation()
                {
                    Content = label,
                    Style = new TextStyle() { Fill = "white" }
                };
            if ((sourceId == "node5" && targetId == "node6") || label == "Yes" || label == "No")
            {
                annotation.Height = 10;
                annotation.Width = 15;
            }
            diagramConnector.Annotations = new DiagramObjectCollection<PathAnnotation>() { annotation };
        }
        diagramConnector.Type = ConnectorSegmentType.Orthogonal;
        connectors!.Add(diagramConnector);
    }
    // Method is used to create a node for the diagram.
    private void CreateNode(string id, double x, double y, NodeFlowShapes shape, string label)
    {
        Node diagramNode = new Node()
            {
                ID = id,
                OffsetX = x,
                OffsetY = y,
                Width = 145,
                Ports = CreatePort(),
                Height = 60,
                Style = new ShapeStyle { Fill = "#357BD2", StrokeColor = "White" },
                Shape = new FlowShape() { Type = Syncfusion.Blazor.Diagram.NodeShapes.Flow, Shape = shape },
                Annotations = new DiagramObjectCollection<ShapeAnnotation>
            {
                new ShapeAnnotation
                {
                    Content = label,
                    Style = new TextStyle()
                    {
                        Color="White", Fill = "transparent"
                    }
                }
            }
            };
        nodes!.Add(diagramNode);
    }
    // Method is used to create a Connector for the palette.
    private void CreatePaletteConnector(string id, ConnectorSegmentType type, DecoratorShape decoratorShape)
    {
        Connector diagramConnector = new Connector()
            {
                ID = id,
                Type = type,
                SourcePoint = new DiagramPoint() { X = 0, Y = 0 },
                TargetPoint = new DiagramPoint() { X = 60, Y = 60 },
                Style = new ShapeStyle() { StrokeWidth = 1, StrokeColor = "#757575" },
                TargetDecorator = new DecoratorSettings()
                {
                    Shape = decoratorShape,
                    Style = new ShapeStyle() { StrokeWidth = 1, StrokeColor = "#757575", Fill = "#757575" }
                }
            };
        connectorSymbols!.Add(diagramConnector);
    }
    private void UpdateHandle()
    {
        UserHandle deleteHandle = AddHandle("Delete", "delete", Direction.Bottom, 0.5);
        UserHandle drawHandle = AddHandle("Draw", "draw", Direction.Right, 0.5);
        handles.Add(deleteHandle);
        handles.Add(drawHandle);
        selectionSettings.UserHandles = handles;
    }
    private UserHandle AddHandle(string name, string path, Direction direction, double offset)
    {
        UserHandle handle = new UserHandle()
            {
                Name = name,
                Visible = true,
                Offset = offset,
                Side = direction,
                Margin = new DiagramThickness() { Top = 0, Bottom = 0, Left = 0, Right = 0 }
            };
        if (path == "delete")
        {
            handle.PathData = "M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z";
        }
        else
        {
            handle.PathData = "M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z";
        }
        return handle;
    }
    @*Hidden:Lines*@
    public void Dispose()
    {
        if (SymbolPreview != null)
        {
            SymbolPreview = null;
        }
        if (SymbolMargin != null)
        {
            SymbolMargin = null;
        }
        Diagram = null;
        PaletteInstance = null;
        if (nodes != null)
        {
            nodes.Clear();
            nodes = null;
        }
        if (connectors != null)
        {
            connectors.Clear();
            connectors = null;
        }
#pragma warning disable BL0005
        if (palettes != null)
        {
            for (int i = 0; i < palettes.Count; i++)
            {
                palettes[i].ID = null;
                palettes[i].Title = null;
                palettes[i].IconCss = null;
                if (palettes[i].Symbols != null)
                {
                    for (int j = 0; j < palettes[i].Symbols.Count; j++)
                    {
                        palettes[i].Symbols[j] = null;
                    }
                    palettes[i].Symbols.Clear();
                    palettes[i].Symbols = null;
                }
            }
            palettes.Clear();
            palettes = null;
        }
#pragma warning restore BL0005
        if (flowShapeSymbols != null)
        {
            flowShapeSymbols.Clear();
            flowShapeSymbols = null;
        }
        if (GridLineIntervals != null)
        {
            Array.Clear(GridLineIntervals, 0, GridLineIntervals.Length);
            GridLineIntervals = null;
        }
        if (connectorSymbols != null)
        {
            connectorSymbols.Clear();
            connectorSymbols = null;
        }
    }
    @*End:Hidden*@
}
