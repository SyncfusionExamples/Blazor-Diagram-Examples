@page "/KeyboardInteraction"

@using System.Collections.ObjectModel
@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.Diagram.Internal

<SfDiagramComponent @ref="@diagram" Height="690px" InteractionController="@DiagramInteractions.SingleSelect" NodeCreating="@NodeCreating" ConnectorCreating="@ConnectorCreating" GetCustomTool="@GetCustomTool" SelectionSettings="@selectionSettings" SelectionChanging="OnSelectionChanging" Created="OnCreated">
    <DataSourceSettings ID="Id" ParentID="ParentId" DataSource="DataSource"></DataSourceSettings>
    <Layout FixedNode="1" Type="LayoutType.MindMap" HorizontalSpacing="80" VerticalSpacing="30" GetBranch="@getbranch"></Layout>
    <SnapSettings Constraints="@SnapConstraints.None"></SnapSettings>
    <CommandManager Commands="commands" Execute="@ExecuteCommand" CanExecute="@CanExecute" />
</SfDiagramComponent>

@code
{
    SfDiagramComponent diagram;
    DiagramSelectionSettings selectionSettings = new DiagramSelectionSettings();
    DiagramObjectCollection<UserHandle> handles = new DiagramObjectCollection<UserHandle>();
    static List<MindMapItem> MindmapData = new List<MindMapItem>();
    DiagramObjectCollection<KeyboardCommand> commands;

    // Create a model class for the data source
    public class MindMapItem
    {
        public string Id { get; set; }
        public string Label { get; set; }
        public string ParentId { get; set; }
        public BranchType Branch { get; set; }
        public string Fill { get; set; }
    }

    //Defining the dataSource
    public object DataSource;

    protected override void OnInitialized()
    {
        selectionSettings.Constraints &= ~(SelectorConstraints.ResizeAll | SelectorConstraints.Rotate);
        MindmapData = new List<MindMapItem>()
        {
            new MindMapItem(){Id="1",Label="Business Planning",ParentId ="",Branch= BranchType.Root, Fill="#034d6d" },
            new MindMapItem(){Id="2",Label= "Expectation",ParentId = "1",Branch= BranchType.Left,Fill= "#1b80c6" },
            new MindMapItem(){Id="3",Label= "Requirements", ParentId="1",Branch= BranchType.Right,Fill= "#1b80c6" },
            new MindMapItem(){Id="4",Label= "Marketing", ParentId="1",Branch= BranchType.Left,Fill= "#1b80c6" },
            new MindMapItem(){Id="5",Label= "Budgets",ParentId= "1",Branch= BranchType.Right,Fill= "#1b80c6" },
            new MindMapItem(){ Id="6", Label="Situation in Market", ParentId= "1", Branch = BranchType.Left, Fill= "#1b80c6" },
            new MindMapItem(){ Id="7", Label="Product Sales", ParentId= "2", Branch = BranchType.SubLeft, Fill= "#3dbfc9" },
            new MindMapItem() { Id = "8", Label= "Strategy", ParentId="2", Branch = BranchType.SubLeft, Fill="#3dbfc9" },
            new MindMapItem() { Id = "9", Label="Contacts", ParentId="2", Branch = BranchType.SubLeft, Fill="#3dbfc9" },
            new MindMapItem() { Id = "10", Label="Customer Groups", ParentId= "4", Branch = BranchType.SubLeft,Fill= "#3dbfc9" },
            new MindMapItem() { Id = "11", Label= "Branding", ParentId= "4", Branch = BranchType.SubLeft, Fill= "#3dbfc9" },
            new MindMapItem() { Id = "12", Label= "Advertising", ParentId= "4", Branch = BranchType.SubLeft, Fill= "#3dbfc9" },
            new MindMapItem() { Id = "13", Label= "Competitors", ParentId= "6", Branch = BranchType.SubLeft, Fill="#3dbfc9" },
            new MindMapItem() { Id = "14", Label="Location", ParentId="6", Branch = BranchType.SubLeft, Fill= "#3dbfc9" },
            new MindMapItem() { Id = "15", Label= "Director", ParentId= "3", Branch = BranchType.SubRight, Fill="#3dbfc9" },
            new MindMapItem() { Id = "16", Label="Accounts Department", ParentId= "3", Branch = BranchType.SubRight, Fill= "#3dbfc9" },
            new MindMapItem() { Id = "17", Label="Administration", ParentId= "3", Branch = BranchType.SubRight, Fill="#3dbfc9" },
            new MindMapItem() { Id = "18", Label= "Development", ParentId="3", Branch = BranchType.SubRight, Fill= "#3dbfc9" },
            new MindMapItem() { Id = "19", Label= "Estimation", ParentId= "5", Branch = BranchType.SubRight, Fill="#3dbfc9" },
            new MindMapItem() { Id = "20", Label= "Profit", ParentId= "5", Branch = BranchType.SubRight, Fill= "#3dbfc9" },
            new MindMapItem(){ Id="21", Label="Funds", ParentId= "5", Branch = BranchType.SubRight, Fill= "#3dbfc9" }
        };
        DataSource = MindmapData;
        commands = new DiagramObjectCollection<KeyboardCommand>()
        {
            CreateCustomCommand("AddLeftChild",DiagramKeys.Tab,ModifierKeys.None),
            CreateCustomCommand("AddRightChild",DiagramKeys.Tab,ModifierKeys.Shift),
            CreateCustomCommand("DeleteChild",DiagramKeys.Delete,ModifierKeys.None),
        };
    }

    // Method to determine whether this command can execute or not.
    public void CanExecute(CommandKeyArgs args)
    {
        args.CanExecute = true;
    }
    
    // Method to execute the custom command
    public void ExecuteCommand(CommandKeyArgs obj)
    {
        Node node = (diagram.SelectionSettings.Nodes[0]) as Node;
        if(node != null)
        {
            BranchType type = (node.Data as MindMapItem).Branch;
            if(type == BranchType.Root)
            {
                switch (obj.Name)
                {
                    case "AddLeftChild":
                        _ = this.AddLeftChild();
                        break;
                    case "AddRightChild":
                        _ = this.AddRightChild();
                        break;
                }                
            }
            else
            {
                switch (obj.Name)
                {
                    case "AddRightChild":
                    case "AddLeftChild":
                        _ = (type == BranchType.Left || type == BranchType.SubLeft) ? this.AddLeftChild() : this.AddRightChild();
                        break;
                    case "DeleteChild":
                        _ = this.DeleteChild();
                        break;
                }
            }
        }
    }
    
    // Method to create custom command.
    private KeyboardCommand CreateCustomCommand(string name, DiagramKeys key, ModifierKeys modifierkey)
    {
        KeyboardCommand command = new KeyboardCommand()
            {
                Name = name,
                Gesture = new KeyGesture() { Key = key, Modifiers = modifierkey }
            };
        return command;
    }

    private BranchType getbranch(IDiagramObject obj)
    {
        BranchType Branch = ((obj as Node).Data as MindMapItem).Branch;
        return Branch;
    }

    private void OnCreated()
    {
        diagram.Select(new ObservableCollection<IDiagramObject>() { diagram.Nodes[0] });
    }

    private async Task AddLeftChild()
    {

        int newChildID = diagram.Nodes.Count + 1;
        string newchildColor = "";
        BranchType type = (diagram.SelectionSettings.Nodes[0].Data as MindMapItem).Branch;
        BranchType childType = BranchType.Left;

        switch (type.ToString())
        {
            case "Root":
                childType = BranchType.Left;
                break;
            case "Left":
            case "SubLeft":
                childType = BranchType.SubLeft;
                break;
        }

        if (diagram.SelectionSettings.Nodes[0].Style.Fill == "#034d6d")
        {
            newchildColor = "#1b80c6";
        }
        else
        {
            newchildColor = "#3dbfc9";
        }

        MindMapItem childNode = new MindMapItem()
        {
            Id = newChildID.ToString(),
            ParentId = (diagram.SelectionSettings.Nodes[0].Data as MindMapItem).Id,
            Fill = newchildColor,
            Branch = childType,
            Label = "New Child"
        };
        diagram.BeginUpdate();
        await UpdatePortConnection(childNode, diagram);
        await diagram.EndUpdateAsync();
        MindmapData.Add(childNode);
        diagram.ClearSelection();
        diagram.Select(new ObservableCollection<IDiagramObject>() { diagram.Nodes[diagram.Nodes.Count - 1] });
        diagram.StartTextEdit(diagram.Nodes[diagram.Nodes.Count - 1]);
    }

    private async Task AddRightChild()
    {
        int newChildID = diagram.Nodes.Count + 1;
        string newchildColor = "";
        BranchType type = (diagram.SelectionSettings.Nodes[0].Data as MindMapItem).Branch;
        BranchType childType = BranchType.Left;

        switch (type.ToString())
        {
            case "Root":
                childType = BranchType.Right;
                break;
            case "Right":
            case "SubRight":
                childType = BranchType.SubRight;
                break;
        }

        if (diagram.SelectionSettings.Nodes[0].Style.Fill == "#034d6d")
        {
            newchildColor = "#1b80c6";
        }
        else
        {
            newchildColor = "#3dbfc9";
        }

        MindMapItem childNode = new MindMapItem()
        {
            Id = newChildID.ToString(),
            ParentId = (diagram.SelectionSettings.Nodes[0].Data as MindMapItem).Id,
            Fill = newchildColor,
            Branch = childType,
            Label = "New Child"
        };
        diagram.BeginUpdate();
        await UpdatePortConnection(childNode, diagram);
        await diagram.EndUpdateAsync();
        MindmapData.Add(childNode);
        diagram.ClearSelection();
        diagram.Select(new ObservableCollection<IDiagramObject>() { diagram.Nodes[diagram.Nodes.Count - 1] });
        diagram.StartTextEdit(diagram.Nodes[diagram.Nodes.Count - 1]);
    }

    private async Task DeleteChild()
    {
        Node deleteObject = (diagram.SelectionSettings.Nodes[0]) as Node;
        if (deleteObject != null)
        {
            BranchType type = (deleteObject.Data as MindMapItem).Branch;
            if (type != BranchType.Root)
            {
                diagram.BeginUpdate();
                RemoveData(deleteObject, diagram);
                diagram.Nodes.Remove(deleteObject);
                _ = diagram.EndUpdateAsync();
                _ = diagram.RefreshDataSourceAsync();
            }
        }
    }
    private void NodeCreating(IDiagramObject obj)
    {
        Node node = obj as Node;
        MindMapItem data = node.Data is MindMapItem ? node.Data as MindMapItem : null;
        node.Height = 50;
        node.Width = 120;
        node.Shape = new BasicShape() { Type = NodeShapes.Basic, Shape = NodeBasicShapes.Ellipse };

        PointPort portLeft = new PointPort()
            {
                ID = "left",
                Offset = new DiagramPoint() { X = 0, Y = 0.5 },
                Height = 10,
                Width = 10,
            };

        PointPort portRight = new PointPort()
            {
                ID = "right",
                Offset = new DiagramPoint() { X = 1, Y = 0.5 },
                Height = 10,
                Width = 10,
            };

        if (node.Data != null)
        {
            node.Style.Fill = data.Fill;
            node.Style.StrokeColor = data.Fill;
            node.Ports = new DiagramObjectCollection<PointPort>()
            {
                portLeft,portRight
            };
        }

        string content = data != null ? data.Label : "New Child";

        node.Annotations = new DiagramObjectCollection<ShapeAnnotation>()
        {
            new ShapeAnnotation()
            {
                Content = content,
                Style=new TextStyle(){Color="White",FontSize = 12,FontFamily="Segoe UI"},
                Offset=new DiagramPoint(){X=0.5,Y=0.5}
            }
        };
        node.Constraints &= ~NodeConstraints.Rotate;
    }

    private void ConnectorCreating(IDiagramObject obj)
    {
        Connector connector = obj as Connector;
        connector.Type = ConnectorSegmentType.Bezier;
        connector.Constraints = ConnectorConstraints.Default & ~ConnectorConstraints.Select;
        connector.Style = new ShapeStyle() { StrokeColor = "#4f4f4f", StrokeWidth = 1 };
        connector.TargetDecorator = new DecoratorSettings() { Shape = DecoratorShape.None };
        connector.SourceDecorator.Shape = DecoratorShape.None;
        Node sourceNode = diagram.GetObject(connector.SourceID) as Node;
        Node targetNode = diagram.GetObject(connector.TargetID) as Node;
        if (targetNode != null && targetNode.Data != null)
        {
            MindMapItem nodeInfo = (targetNode.Data as MindMapItem);
            if (nodeInfo.Branch == BranchType.Right || nodeInfo.Branch == BranchType.SubRight)
            {
                connector.SourcePortID = sourceNode.Ports[0].ID;
                connector.TargetPortID = targetNode.Ports[1].ID;
            }
            else if (nodeInfo.Branch == BranchType.Left || nodeInfo.Branch == BranchType.SubLeft)
            {
                connector.SourcePortID = sourceNode.Ports[1].ID;
                connector.TargetPortID = targetNode.Ports[0].ID;
            }
        }
    }
    
    // Method to customize the tool
    public InteractionControllerBase GetCustomTool(DiagramElementAction action, string id)
    {
        InteractionControllerBase tool = null;
        if (id == "AddLeft")
        {
            tool = new AddRightTool(diagram);
        }
        else if (id == "AddRight")
        {
            tool = new AddLeftTool(diagram);
        }
        else
        {
            tool = new DeleteTool(diagram);
        }
        return tool;
    }

    // Custom tool to add the node.
    public class AddLeftTool : DragController
    {
        SfDiagramComponent diagram;
        public AddLeftTool(SfDiagramComponent Diagram) : base(Diagram)
        {
            diagram = Diagram;
        }
        public override async void OnMouseDown(DiagramMouseEventArgs args)
        {
            int newChildID = diagram.Nodes.Count + 1;
            string newchildColor = "";
            BranchType type = (diagram.SelectionSettings.Nodes[0].Data as MindMapItem).Branch;
            BranchType childType = BranchType.Left;

            switch (type.ToString())
            {
                case "Root":
                    childType = BranchType.Left;
                    break;
                case "Left":
                case "SubLeft":
                    childType = BranchType.SubLeft;
                    break;
            }

            if (diagram.SelectionSettings.Nodes[0].Style.Fill == "#034d6d")
            {
                newchildColor = "#1b80c6";
            }
            else
            {
                newchildColor = "#3dbfc9";
            }

            MindMapItem childNode = new MindMapItem()
            {
                Id = newChildID.ToString(),
                ParentId = (diagram.SelectionSettings.Nodes[0].Data as MindMapItem).Id,
                Fill = newchildColor,
                Branch = childType,
                Label = "New Child"
            };
            diagram.BeginUpdate();
            await UpdatePortConnection(childNode, diagram);
            await diagram.EndUpdateAsync();
            MindmapData.Add(childNode);
            diagram.ClearSelection();
            base.OnMouseDown(args);
            diagram.Select(new ObservableCollection<IDiagramObject>() { diagram.Nodes[diagram.Nodes.Count - 1] });
            diagram.StartTextEdit(diagram.Nodes[diagram.Nodes.Count - 1]);
            this.InAction = true;
        }
    }

    private static async Task UpdatePortConnection(MindMapItem childNode, SfDiagramComponent diagram)
    {
        Node node = new Node()
            {
                Data = childNode,
            };
        Connector connector = new Connector()
            {
                TargetID = node.ID,
                SourceID = diagram.SelectionSettings.Nodes[0].ID
            };
        await diagram.AddDiagramElementsAsync(new DiagramObjectCollection<NodeBase>() { node, connector });
        Node sourceNode = diagram.GetObject(connector.SourceID) as Node;
        Node targetNode = diagram.GetObject(connector.TargetID) as Node;
        if (targetNode != null && targetNode.Data != null)
        {
            MindMapItem nodeInfo = (targetNode.Data as MindMapItem);
            if (nodeInfo.Branch == BranchType.Right || nodeInfo.Branch == BranchType.SubRight)
            {
                connector.SourcePortID = sourceNode.Ports[0].ID;
                connector.TargetPortID = targetNode.Ports[1].ID;
            }
            else if (nodeInfo.Branch == BranchType.Left || nodeInfo.Branch == BranchType.SubLeft)
            {
                connector.SourcePortID = sourceNode.Ports[1].ID;
                connector.TargetPortID = targetNode.Ports[0].ID;
            }
        }
        await diagram.DoLayoutAsync();
    }
    
    // Custom tool to add the node.
    public class AddRightTool : DragController
    {
        SfDiagramComponent diagram;
        public AddRightTool(SfDiagramComponent Diagram) : base(Diagram)
        {
            diagram = Diagram;
        }
        public override async void OnMouseDown(DiagramMouseEventArgs args)
        {
            int newChildID = diagram.Nodes.Count + 1;
            string newchildColor = "";
            BranchType type = (diagram.SelectionSettings.Nodes[0].Data as MindMapItem).Branch;
            BranchType childType = BranchType.Left;

            switch (type.ToString())
            {
                case "Root":
                    childType = BranchType.Right;
                    break;
                case "Right":
                case "SubRight":
                    childType = BranchType.SubRight;
                    break;
            }

            if (diagram.SelectionSettings.Nodes[0].Style.Fill == "#034d6d")
            {
                newchildColor = "#1b80c6";
            }
            else
            {
                newchildColor = "#3dbfc9";
            }

            MindMapItem childNode = new MindMapItem()
            {
                Id = newChildID.ToString(),
                ParentId = (diagram.SelectionSettings.Nodes[0].Data as MindMapItem).Id,
                Fill = newchildColor,
                Branch = childType,
                Label = "New Child"
            };
            diagram.BeginUpdate();
            await UpdatePortConnection(childNode, diagram);
            await diagram.EndUpdateAsync();
            MindmapData.Add(childNode);
            diagram.ClearSelection();
            base.OnMouseDown(args);
            diagram.Select(new ObservableCollection<IDiagramObject>() { diagram.Nodes[diagram.Nodes.Count - 1] });
            diagram.StartTextEdit(diagram.Nodes[diagram.Nodes.Count - 1]);
            this.InAction = true;
        }
    }

    public class DeleteTool : DragController
    {
        SfDiagramComponent sfDiagram;
        Node deleteObject = null;
        public DeleteTool(SfDiagramComponent Diagram) : base(Diagram)
        {
            sfDiagram = Diagram;
        }
        public override void OnMouseDown(DiagramMouseEventArgs args)
        {
            deleteObject = (sfDiagram.SelectionSettings.Nodes[0]) as Node;
        }
        public override void OnMouseUp(DiagramMouseEventArgs args)
        {
            if (deleteObject != null)
            {
                sfDiagram.BeginUpdate();
                RemoveData(deleteObject, sfDiagram);
                sfDiagram.Nodes.Remove(deleteObject);
                _ = sfDiagram.EndUpdateAsync();
                _ = sfDiagram.RefreshDataSourceAsync();
            }
            base.OnMouseUp(args);
            this.InAction = true;
        }
    }
    
    private static void RemoveData(Node node, SfDiagramComponent diagram)
    {
        if (node.OutEdges.Count > 0)
        {
            for (int i = 0; i < node.OutEdges.Count; i++)
            {
                Connector connector = diagram.GetObject(node.OutEdges[i]) as Connector;
                Node targetnode = diagram.GetObject(connector.TargetID) as Node;
                if (targetnode.OutEdges.Count > 0)
                {
                    RemoveData(targetnode, diagram);
                }
                else
                {
                    MindmapData.Remove(targetnode.Data as MindMapItem);
                }
            }
            MindmapData.Remove(node.Data as MindMapItem);
        }
        else
        {
            MindmapData.Remove(node.Data as MindMapItem);
        }
    }
    
    private void OnSelectionChanging(SelectionChangingEventArgs args)
    {
        if (args.NewValue.Count > 0)
        {
            if (args.NewValue[0] is Node && (args.NewValue[0] as Node).Data != null)
            {
                BranchType type = ((args.NewValue[0] as Node).Data as MindMapItem).Branch;
                if (type == BranchType.Root)
                {
                    selectionSettings.UserHandles[0].Visible = false;
                    selectionSettings.UserHandles[1].Visible = false;
                    selectionSettings.UserHandles[2].Visible = true;
                    selectionSettings.UserHandles[3].Visible = true;
                }
                else if (type == BranchType.Left || type == BranchType.SubLeft)
                {
                    selectionSettings.UserHandles[0].Visible = false;
                    selectionSettings.UserHandles[1].Visible = true;
                    selectionSettings.UserHandles[2].Visible = true;
                    selectionSettings.UserHandles[3].Visible = false;
                }
                else if (type == BranchType.Right || type == BranchType.SubRight)
                {
                    selectionSettings.UserHandles[0].Visible = true;
                    selectionSettings.UserHandles[1].Visible = false;
                    selectionSettings.UserHandles[2].Visible = false;
                    selectionSettings.UserHandles[3].Visible = true;
                }
            }
        }
    }


    private void UpdateHandle()
    {
        UserHandle deleteLeftHandle = AddHandle("DeleteRight", "delete", Direction.Right);

        UserHandle addRightHandle = AddHandle("AddLeft", "add", Direction.Left);

        UserHandle addLeftHandle = AddHandle("AddRight", "add", Direction.Right);

        UserHandle deleteRightHandle = AddHandle("DeleteLeft", "delete", Direction.Left);

        handles.Add(deleteLeftHandle);
        handles.Add(deleteRightHandle);
        handles.Add(addLeftHandle);
        handles.Add(addRightHandle);

        selectionSettings.UserHandles = handles;
    }

    private UserHandle AddHandle(string name, string path, Direction direction)
    {
        UserHandle handle = new UserHandle()
            {
                Name = name,
                Visible = true,
                Offset = 0.5,
                Side = direction,
                Margin = new DiagramThickness() { Top = 0, Bottom = 0, Left = 0, Right = 0 }
            };
        if (path == "delete")
        {
            handle.PathData = "M1.0000023,3 L7.0000024,3 7.0000024,8.75 C7.0000024,9.4399996 6.4400025,10 5.7500024,10 L2.2500024,10 C1.5600024,10 1.0000023,9.4399996 1.0000023,8.75 z M2.0699998,0 L5.9300004,0 6.3420029,0.99999994 8.0000001,0.99999994 8.0000001,2 0,2 0,0.99999994 1.6580048,0.99999994 z";
        }
        else
        {
            handle.PathData = "M4.0000001,0 L6,0 6,4.0000033 10,4.0000033 10,6.0000033 6,6.0000033 6,10 4.0000001,10 4.0000001,6.0000033 0,6.0000033 0,4.0000033 4.0000001,4.0000033 z";
        }
        return handle;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            UpdateHandle();
        }
    }
}
