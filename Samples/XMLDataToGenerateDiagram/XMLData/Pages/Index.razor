@page "/"

@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.Buttons
@using Microsoft.JSInterop
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Inputs
@inject IJSRuntime jsRuntime
@using Newtonsoft.Json
@using System.Xml.Linq
@using System;
@using System.Collections.Generic;
@using System.Linq;

@inject XmlFileService XmlFileService
<style>
    .e-file-select-wrap {
        display: none;
    }

    .e-orgchart-template-div-style {
        position: absolute;
        width: 170px;
        height: 120px;
        border: 1px solid #6495ED;
        background: #6495ED;
        box-sizing: border-box;
        border-radius: 5px;
    }
</style>

<div>
  
    <SfDiagramComponent  Height="700px" @ref="@diagram" @bind-Nodes="@nodes" NodeCreating="@OnNodeCreating" ConnectorCreating="@OnConnectorCreating">
        <DataSourceSettings ID="EmployeeID" ParentID="ManagerID" DataSource="@dataSourceDetails"></DataSourceSettings>
        <Layout Type="LayoutType.HierarchicalTree"  @bind-HorizontalSpacing="@HorizontalSpacing" @bind-VerticalSpacing="@VerticalSpacing" @bind-HorizontalAlignment="@horizontalAlignment" @bind-VerticalAlignment="@verticalAlignment">
            <LayoutMargin Left="50" Top="50"></LayoutMargin>
        </Layout>
        <DiagramTemplates>
            <NodeTemplate>
                @{
                        Node node1 = (context as Node);
                        string Name = (node1.Data as OrgChartDetails).Name;
                        string Designation = (node1.Data as OrgChartDetails).Designation;
                        <div class="e-orgchart-template-div-style">
                            <div style="height:75%; float:right; margin-right:20px;">
                                <div>
                                    <b>Name:</b> @Name
                                </div>
                                <div>
                                    <b>Role:</b> @Designation
                                </div>
                            </div>
                        </div>
                    }
                </NodeTemplate>
            </DiagramTemplates>
</SfDiagramComponent>
        <SfButton OnClick="@XMLDiagram">ImportToXML</SfButton>
</div>



    @code{
    
    SfDiagramComponent diagram;
  
    //Creates connectors with some default values.
    private void OnNodeCreating(IDiagramObject obj)
    {
        Node node = obj as Node;
        node.Height = 120;
        node.Width = 170;
        node.Style.Fill = "#88C65C";
        node.Style.StrokeColor = "#88C65C";
        node.Shape = new Shape()
            {
                Type = Syncfusion.Blazor.Diagram.NodeShapes.HTML,
            };

    }
    //Creates node with some default values.
    private void OnConnectorCreating(IDiagramObject connector)
    {
        Connector connectors = connector as Connector;
        connectors.Type = ConnectorSegmentType.Orthogonal;
        connectors.Style = new TextStyle() { StrokeColor = "#6495ED", StrokeWidth = 2 };
        connectors.TargetDecorator = new DecoratorSettings
            {
                Shape = DecoratorShape.None,
            };
    }
    /// <summary>
    /// Specifies the vertical spacing between diagram elements.
    /// </summary>
    int VerticalSpacing = 50;

    /// <summary>
    /// Specifies the horizontal spacing between diagram elements.
    /// </summary>
    int HorizontalSpacing = 100;
    /// <summary>
    /// Specifies the horizontal alignment of the diagram elements.
    /// </summary>
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Auto;

    /// <summary>
    /// Specifies the vertical alignment of the diagram elements.
    /// </summary>
    private VerticalAlignment verticalAlignment = VerticalAlignment.Auto;
    DiagramObjectCollection<Node> nodes = new DiagramObjectCollection<Node>();
    protected override void OnInitialized()
    {
        Node node = new Node()
            {
                // Position of the node
                OffsetX = 250,
                OffsetY = 250,
                // Size of the node
                Width = 100,
                Height = 100,
                Style = new ShapeStyle() { Fill = "#6495ED", StrokeColor = "white" }
            };
       // nodes.Add(node);
    }

    /// <summary>
    /// List to store data source details.
    /// </summary>
    private List<OrgChartDetails> dataSourceDetails = new List<OrgChartDetails>();
    //Method to save the diagram
    public async Task XMLDiagram()
    {
        XDocument xmlDoc = await XmlFileService.GetXmlDocumentAsync("people.xml");
        var employeesList = new List<Dictionary<string, string>>();
        if (xmlDoc != null)
        {
            foreach (var employee in xmlDoc.Descendants("Employees"))
            {
                var empDict = new Dictionary<string, string>
            {
                { "EmployeeID", employee.Attribute("EmployeeID").Value },
                { "Name", employee.Element("Name").Value },
                { "Designation", employee.Element("Designation").Value }
            };

                // Optional ManagerID
                var managerId = employee.Element("ManagerID");
                if (managerId != null)
                {
                    empDict.Add("ManagerID", managerId.Value);
                }

                employeesList.Add(empDict);
            }
            // Convert the list of employees to JSON format
            string jsonData = JsonConvert.SerializeObject(employeesList, Formatting.Indented);
            dataSourceDetails = JsonConvert.DeserializeObject<List<OrgChartDetails>>(jsonData);
            await diagram.RefreshDataSource();
        }
    }

    public partial class OrgChartDetails
    {
        /// <summary>
        /// Gets or sets the employee ID.
        /// </summary>
        
        public string EmployeeID { get; set; }

        /// <summary>
        /// Gets or sets the name of the employee.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the role of the employee.
        /// </summary>
        public string Designation { get; set; }

        /// <summary>
        /// Gets or sets the Manager of the employee.
        /// </summary>
        public string ManagerID { get; set; }

    }
   
}

   