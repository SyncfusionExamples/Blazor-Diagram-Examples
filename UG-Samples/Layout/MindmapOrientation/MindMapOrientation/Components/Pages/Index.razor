@page "/"

@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.DropDowns;


<SfDiagramComponent @ref="@diagram" Height="600px" NodeCreating="@OnNodeCreating" ConnectorCreating="@OnConnectorCreating">
    <RulerSettings>
        <HorizontalRuler></HorizontalRuler>
        <VerticalRuler></VerticalRuler>
    </RulerSettings>
    <DataSourceSettings ID="Id" ParentID="ParentId" DataSource="@DataSource"></DataSourceSettings>
    <Layout Type="LayoutType.MindMap" @bind-Orientation="SelectedOrientation" GetBranch="@GetBranch" HorizontalSpacing="50">
        <LayoutMargin Top="20" Left="20"></LayoutMargin>
    </Layout>
</SfDiagramComponent>
<SfDropDownList TValue="LayoutOrientation"
                TItem="string"
                DataSource="@LayoutOrientationValues"
                @bind-Value="SelectedOrientation"
                Placeholder="Select Orientation"
                Width="300px">
</SfDropDownList>

@code {
    SfDiagramComponent diagram;
    public string[] LayoutOrientationValues = Enum.GetNames(typeof(LayoutOrientation));

    // The selected value, bound to the enum
    public LayoutOrientation SelectedOrientation { get; set; } = LayoutOrientation.Horizontal;

    // Set the branch type on runtime
    private BranchType GetBranch(IDiagramObject obj)
    {
        Node node = obj as Node;
        MindMapDetails mindMapData = node.Data as MindMapDetails;
        if (mindMapData == null || string.IsNullOrWhiteSpace(mindMapData.Branch))
            return BranchType.Left;

        return Enum.TryParse(mindMapData.Branch, out BranchType branchType) ? branchType : BranchType.SubLeft;
    }

    //Creates nodes with some default values.
    private void OnNodeCreating(IDiagramObject obj)
    {

        if (!(obj is NodeGroup))
        {
            Node node = obj as Node;
            node.Height = 100;
            node.Width = 100;
            node.BackgroundColor = "#6BA5D7";
            node.Style = new ShapeStyle() { Fill = "#6495ED", StrokeWidth = 1, StrokeColor = "white" };
            node.Shape = new BasicShape() { Type = NodeShapes.Basic };
            MindMapDetails mindMapData = node.Data as MindMapDetails;
            if (mindMapData != null)
            {
                node.Annotations = new DiagramObjectCollection<ShapeAnnotation>()
        {
            new ShapeAnnotation()
            {
                Content = mindMapData.Label
            }
        };
            }
        }

    }

    //Creates connectors with some default values.
    private void OnConnectorCreating(IDiagramObject connector)
    {
        Connector connectors = connector as Connector;
        connectors.Type = ConnectorSegmentType.Bezier;
        connectors.Style = new ShapeStyle() { StrokeColor = "#6495ED", StrokeWidth = 2 };
        connectors.TargetDecorator = new DecoratorSettings
            {
                Shape = DecoratorShape.None,
            };
    }
    public class MindMapDetails
    {
        public string Id { get; set; }
        public string Label { get; set; }
        public string ParentId { get; set; }
        public string Branch { get; set; }
        public string Fill { get; set; }
    }
    public List<MindMapDetails> DataSource = new List<MindMapDetails>()
   {
        new MindMapDetails() { Id = "1", Label = "Project Planning", ParentId = "", Branch = "Root" },
        new MindMapDetails() { Id = "2", Label = "Requirements", ParentId = "1", Branch = "Right" },
        new MindMapDetails() { Id = "3", Label = "Design", ParentId = "1", Branch = "Right" },
        new MindMapDetails() { Id = "5", Label = "Stakeholder Analysis", ParentId = "2", Branch = "SubRight" },
        new MindMapDetails() { Id = "6", Label = "Documentation", ParentId = "2", Branch = "SubRight" },
        new MindMapDetails() { Id = "7", Label = "UI Design", ParentId = "3", Branch = "SubRight" },
        new MindMapDetails() { Id = "8", Label = "Database Design", ParentId = "3", Branch = "SubRight" }
   };


}